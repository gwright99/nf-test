lamanifest {
  name        = 'ScaleAtac'
  version     = 1.0
}

//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
// See nextflow_schema.json for description
params {
    fastqDir = null 
    
    //// Sample information (required!)
    samples = null
    libStructure = "${projectDir}/references/lib-atacUniversal-a.json"

    //// Workflow outputs (sub-directory of workflow launch dir)
    outDir = "out"

    //// Max. resources that can be requested for a single job
    max_memory = "30.GB"
    max_cpus = 32
}

process {
    errorStrategy = 'retry'
    maxRetries = 1

    cpus = { max_cpu(2) }
    memory = { max_mem(4.GB * task.attempt) }
    time = 48.h

    container = "felixschlesinger/scaleatac@sha256:9d93f74cfc7b01e1fe809c022c88742fc53710b3dca710492169f083d020dec8"

    withLabel: small {
        cpus = 1
        memory = { max_mem(2.GB * task.attempt) }
	}
    withName:barcodeDemux {
        cpus = { max_cpu(6) }
        memory = { max_mem(6.GB * task.attempt) }
    }
    withName:sampleReport {
      container = "felixschlesinger/scalereport@sha256:5041ef7a5a9cd446bf0cfa987e02e62f65125f1090a40b40bb720d8a8f1fbd4e"
    }
}

profiles {
  conda {
    process {
      conda = "$projectDir/envs/scaleAtac.conda.yml"
      withName:cellFilter { conda = "$projectDir/envs/scalereport.conda.yml" }
      withName:sampleReport { conda = "$projectDir/envs/scalereport.conda.yml" }
      withName:fastqReport { conda = "$projectDir/envs/scalereport.conda.yml" }
    }
  }
  docker {
    // Shared settings for all container engines go here
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true 
    docker.enabled = false
  }
  podman {
    podman.enabled = true 
    docker.enabled = false
  }
}

// nf-core functions to ensure that resource requirements don't go 
// beyond a maximum limit
def max_mem(obj) {
    if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
    else
        return obj
}
def max_cpu(obj) {
    return Math.min(obj, params.max_cpus as int)
}